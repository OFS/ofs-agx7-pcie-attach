//Copyright (C) 2021 Intel Corporation
//SPDX-License-Identifier: MIT
//===============================================================================================================
/**
 * Abstract:
 * class mix_intr_seq is executed by mix_intr_test 
 * 
 * This sequence verifies the functionality of the user/fme/UART interrupts  
 * The interrupt is generated by forcing / writing the error register 
 * PBA mechanism is verified using masking and un-masking the interrupt vector
 * Sequence is running on virtual_sequencer 
 *
 *
**/
//===============================================================================================================


`ifndef MIX_INTR_SEQ_SVH
`define MIX_INTR_SEQ_SVH

class mix_intr_seq extends base_seq;
    `uvm_object_utils(mix_intr_seq)
    `uvm_declare_p_sequencer(virtual_sequencer)

    he_mem_multi_user_intr_seq he_mem_user_intr_seq;
    he_lpbk_multi_user_intr_seq he_lpbk_user_intr_seq;
    fme_multi_err_intr_seq fme_intr_seq;
    `ifdef INCLUDE_UART
        uart_intr_seq uart_intr_seq;
    `endif

    function new(string name = "mix_intr_seq");
        super.new(name);
    endfunction : new

    task body();
        super.body();
        `uvm_info(get_name(), "Entering mix_intr_seq...", UVM_LOW)
	fork
	    begin
	      `uvm_do_on_with(he_mem_user_intr_seq, p_sequencer, { bypass_config_seq == 1;})
            end
	    begin
	      `uvm_do_on_with(he_lpbk_user_intr_seq, p_sequencer, { bypass_config_seq == 1;})
            end
            begin
	      `uvm_do_on_with(fme_intr_seq, p_sequencer, { bypass_config_seq == 1;})
            end
            `ifdef INCLUDE_UART
            begin
	      `uvm_do_on_with(uart_intr_seq, p_sequencer, { bypass_config_seq == 1;})
            end
            `endif
	join
        `uvm_info(get_name(), "Entering mix_intr_seq...", UVM_LOW)
    endtask : body

endclass : mix_intr_seq

`endif // MIX_INTR_SEQ_SVH
