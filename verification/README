How to setup UVM TB and run sumulation for UVM Testcase for N6001?

Initial Setup:
  1)  Get a Bash shell (e.g. xterm)
  2)  Go to ./applications.fpga.ofs.reference-fims
For Internal Customers:
  3)  source env_not_shipped/n6001/env.sh
  4)  To enable VERDI/FSDB ,env_not_shipped/n6001/env_verdi.sh (default VPD will be created)
For External Customers:
  3)  Set all tool paths vcs, python etc. Please make sure Tool versions used are as follows:
      VCS : vcsmx/T-2022.06-SP1-1
      VERDI: T-2022.06-SP1-1
      Python : python/3.7.7
      SNPS VIP Portfolio Version : vip_Q-2020.03A
      PCIe VIP : Q-2020.03
      AXI VIP : Q-2020.03
      Ethernet VIP : Q-2020.03
  4)  Set the required environment and directory Structure variables (as shown below)
      export OFS_ROOTDIR=<pwd>
      export QUARTUS_HOME=<Quartus Installation path upto /quartus>
      export QUARTUS_INSTALL_DIR=$QUARTUS_HOME
      export IMPORT_IP_ROOTDIR=$QUARTUS_HOME/../ip
      export VERDIR=$OFS_ROOTDIR/verification
      export VIPDIR=$VERDIR
      export VIPDIR=$VERDIR
      export DESIGNWARE_HOME=<VIP installation path>
      export EMAIL_LIST=$OFS_ROOTDIR/<email_list.f file path>

How to Run UVM Testcases with N6001 P_TILE platform?:
1)  cd $VERDIR/scripts
2)  For Compiling IPs and Subsystems, execute: “gmake -f Makefile_VCS.mk cmplib_adp" 
3)  For building RTL & TB, execute: “gmake -f Makefile_VCS.mk build_adp <DUMP=1> <DEBUG=1>"

4)  For run, execute: “gmake -f Makefile_VCS.mk run TESTNAME=mmio_test <DUMP=1> <DEBUG=1> <SEED=<seed number>>”
5)  Results are created in a sim directory ($VERDIR/sim)

**Note: To run he_hssi_rx_lpbk_25G_10G_test testcases:  a switch TEST_LPBK=1 should be added for the build and run command
        Ex:  "gmake -f Makefile_VCS.mk build_adp <DUMP=1> <DEBUG=1> <TEST_LPBK=1> && gmake -f Makefile_VCS.mk run TESTNAME=he_hssi_rx_lpbk_25G_10G_test <DUMP=1> <DEBUG=1> <TEST_LPBK=1> <SEED=<seed number>>"

**Note: Step 2 Compiles IPs and subsystems from scratch instead of using precompiled versions.
               This step can be skipped if there is no change in Quartus generated files from the previous build.

**Note: To clean previous build and sim files, Run "gmake -f Makefile_VCS.mk clean" command.


How to Run UVM Testcases with N6001 F_TILE platform?:
1)  cd $VERDIR/scripts
2)  For Compiling IPs and Subsystems, execute: “gmake -f Makefile_VCS.mk cmplib_adp <FTILE_SIM=1>" 
3)  For building RTL & TB, execute: “gmake -f Makefile_VCS.mk build_adp <DUMP=1> <DEBUG=1> <FTILE_SIM=1> "

4)  For run, execute: “gmake -f Makefile_VCS.mk run TESTNAME=mmio_test <DUMP=1> <DEBUG=1> <SEED=<seed number>> <FTILE_SIM=1>”
5)  Results are created in a sim directory ($VERDIR/sim)

**Note: To run he_hssi_rx_lpbk_25G_10G_test testcases:  a switch TEST_LPBK=1 should be added for the build and run command
        Ex:  "gmake -f Makefile_VCS.mk build_adp <DUMP=1> <DEBUG=1> <TEST_LPBK=1> <FTILE_SIM=1> && gmake -f Makefile_VCS.mk run TESTNAME=he_hssi_rx_lpbk_25G_10G_test <DUMP=1> <DEBUG=1> <TEST_LPBK=1> <SEED=<seed number>> <FTILE_SIM=1>"

**Note: Step 2 Compiles IPs and subsystems from scratch instead of using precompiled versions.
               This step can be skipped if there is no change in Quartus generated files from the previous build.

**Note: To clean previous build and sim files, Run "gmake -f Makefile_VCS.mk clean" command.





How to Run UVM Regressions?:

** usage : python uvm_regress.py --help

 -l, --local Run regression locally, or run it on Farm. (Default:False)
 -n[N], --n_procs [N] Maximum number of processes/UVM tests to run in parallel when run locally. This has no effect on Farm run. (Default #CPUs-1: 11)
 -p [{adp}], --plat [{adp}] HW platform for regression test. (Default: adp)
 -k [{top_pkg,test_pkg,test_long_pkg,hssi_tx_pkg}], --pack [{top_pkg,test_pkg,test_long_pkg,hssi_tx_pkg}] Test suite to run during regression. (Default:top_pkg)
 -s [{vcs}], --sim [{vcs}] Simulator used for regression test. (Default: vcs)
 -c [{none,ral_cov,fun_cov}], --cov [{none,ral_cov,fun_cov}] Code coverage used for regression, if any. (Default:none)
 -e --email_list Sends the regression results on email provided in list (Default : It will send it to regression Owner)
 -t  [{ptile,ftile}]-- tile Selects the tile on which simulation to be run (Default:ptile)

1)  cd $VERDIR/scripts  

###run locally, with 8 processes, for adp platform, using top_pkg set of tests, using VCS with no code coverage.  
python uvm_regress.py -l -n 8 -p adp -k top_pkg -s vcs -c none -e

###run locally, with 8 processes, for adp platform, using top_pkg set of tests, using VCS with no code coverage on FTILE 
python uvm_regress.py -l -n 8 -p adp -k top_pkg -s vcs -c none -e -t ftile

###Same as above, but run on Intel Farm (no --local):   
python uvm_regress.py --plat adp --pack top_pkg --sim vcs --cov none -e

###Running script using defaults: run on Farm, adp platform, using top_pkg set of tests, using VCS with no code coverage and sends result to owner 
python uvm_regress.py

2)  Results are created in a sim directory ($VERDIR/sim) with individual testcase log dir


**Note: Each testcase runs with random seeds in regression.

