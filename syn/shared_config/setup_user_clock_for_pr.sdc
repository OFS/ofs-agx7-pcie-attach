# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: MIT

##
## Define user clock information as a side effect of timing analysis. This
## may be used later, especially in PR builds, to constrain the user clock
## to an AFU-specific frequency.
##

# Only create the script once...
if {[file exists "ofs_partial_reconfig/user_clock_defs.tcl"] == 0} {
  # A common script for walking the clocks and finding the user clock
  source $::env(BUILD_ROOT_REL)/ofs-common/scripts/common/syn/import_user_clk_sdc.tcl

  #
  # Platform/architecture specific configuration:
  #  - The pattern to search for user clock
  #  - The maximum frequency
  #  - Tcl file to generate that will configured user clock constraints
  #
  setup_user_clk_sdc "*qph_user_clk_iopll|iopll_0_outclk*" 800 ofs_partial_reconfig/user_clock_defs.tcl
}

# Load the clock constraint functions, generated by the previous command
source ofs_partial_reconfig/user_clock_defs.tcl

# Constrain the user clock to the maximum legal frequency during the FIM build.
# Nothing is actually attached to it, but we add the constraint so the clock
# tree reaching the AFU will meeting aggressive timing.
#
# The absurdly large frequencies here will be reduced to platform-specific
# maximum values by constrain_user_clks.
#
# Do not apply the constraint during the STA phase of the FIM build. Instead,
# leave the user clock constrained at its native frequency. This is the frequency
# at which it will be initialized when the FIM is loaded.
if { ![string equal "quartus_sta" $::TimeQuestInfo(nameofexecutable)] } {
  if { ![info exists ::userClocks::no_added_constraints] } {
    post_message "Applying high frequency constraint to FIM user clock during $::TimeQuestInfo(nameofexecutable)."
    constrain_user_clks {5000 5000}
  }
}
